monitoringCluster="cagg"
logDirectory="logs"
hostPipelineConfiguration="/opt/cluster-aggregator/config/hostPipeline.conf"
clusterPipelineConfiguration="/opt/cluster-aggregator/config/clusterPipeline.conf"
httpHost="0.0.0.0"
httpPort=7066
httpHealthCheckPath="/ping"
httpStatusPath="/status"
httpVersionPath="/version"
aggregationHost="0.0.0.0"
aggregationPort=7065
jvmMetricsCollectionInterval="PT0.5S"
maxConnectionTimeout="PT2M"
minConnectionTimeout="PT1M"
clusterHostSuffix=".cluster"
rebalanceConfiguration {
  maxParallel=100
  threshold=500
}
akkaConfiguration {
  akka {
    extensions=["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
    loggers=["akka.event.slf4j.Slf4jLogger"]
    loglevel="DEBUG"
    stdout-loglevel="DEBUG"
    logging-filter="akka.event.slf4j.Slf4jLoggingFilter"
    actor {
      provider="akka.cluster.ClusterActorRefProvider"
      serializers {
        proto="akka.remote.serialization.ProtobufSerializer"
      }
      serialization-bindings {
        "com.arpnetworking.metrics.aggregation.protocol.Messages$StatisticSetRecord"="proto"
      }
      debug {
        unhandled="on"
      }
    }
    cluster {
      seed-nodes=["akka.tcp://Metrics@127.0.0.1:2551"]
      sharding {
        state-store-mode="persistence"
      }
    }
    remote {
      log-remote-lifecycle-events="on"
      netty.tcp.hostname="127.0.0.1"
      netty.tcp.port=2551
    }
    persistence {
      journal {
        plugin = "akka.persistence.journal.leveldb"
        leveldb.dir = "/opt/cluster-aggregator/data/journal"
      }
      snapshot-store {
        plugin = "akka.persistence.snapshot-store.local"
        local.dir = "/opt/cluster-aggregator/data/snapshots"
      }
    }
  }
}
